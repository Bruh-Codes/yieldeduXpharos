/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace BorrowProtocol {
  export type LoanStruct = {
    loanId: BigNumberish;
    collateralAmount: BigNumberish;
    collateralToken: AddressLike;
    borrowToken: AddressLike;
    borrowAmount: BigNumberish;
    duration: BigNumberish;
    startTime: BigNumberish;
    interestRate: BigNumberish;
    userAddress: AddressLike;
    amountPaid: BigNumberish;
    active: boolean;
  };

  export type LoanStructOutput = [
    loanId: bigint,
    collateralAmount: bigint,
    collateralToken: string,
    borrowToken: string,
    borrowAmount: bigint,
    duration: bigint,
    startTime: bigint,
    interestRate: bigint,
    userAddress: string,
    amountPaid: bigint,
    active: boolean
  ] & {
    loanId: bigint;
    collateralAmount: bigint;
    collateralToken: string;
    borrowToken: string;
    borrowAmount: bigint;
    duration: bigint;
    startTime: bigint;
    interestRate: bigint;
    userAddress: string;
    amountPaid: bigint;
    active: boolean;
  };
}

export interface BorrowProtocolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Borrow"
      | "allActiveLoans"
      | "calculateHealthFactorSimulated"
      | "calculateTotalDue"
      | "currentLoanId"
      | "fundPool"
      | "getAllActiveLoans"
      | "getLiquidationThreshold"
      | "getMinCollateralAmount"
      | "getMinHealthFactor"
      | "getMinimumDuration"
      | "getUserLoans"
      | "liquidate"
      | "minHealthFactor"
      | "minimumDuration"
      | "owner"
      | "payLoan"
      | "renounceOwnership"
      | "setLiquidationThreshold"
      | "setMinCollateralAmount"
      | "setMinHealthFactor"
      | "setMinimumDuration"
      | "transferOwnership"
      | "yieldPool"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActiveLoanUpdated"
      | "CollateralDeposited"
      | "CollateralWithdrawn"
      | "LoanCreated"
      | "LoanLiquidated"
      | "LoanRepaid"
      | "OwnershipTransferred"
      | "PoolFunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "Borrow",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allActiveLoans",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHealthFactorSimulated",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTotalDue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLoanId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundPool",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationThreshold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCollateralAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLoans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minHealthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCollateralAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinHealthFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "yieldPool", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHealthFactorSimulated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTotalDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLoanId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yieldPool", data: BytesLike): Result;
}

export namespace ActiveLoanUpdatedEvent {
  export type InputTuple = [loanId: BigNumberish, active: boolean];
  export type OutputTuple = [loanId: bigint, active: boolean];
  export interface OutputObject {
    loanId: bigint;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralDepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    loanId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, loanId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    loanId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    loanId: BigNumberish,
    amount: BigNumberish,
    token: AddressLike,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    loanId: bigint,
    amount: bigint,
    token: string,
    duration: bigint
  ];
  export interface OutputObject {
    user: string;
    loanId: bigint;
    amount: bigint;
    token: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [
    user: AddressLike,
    loanId: BigNumberish,
    liquidator: AddressLike
  ];
  export type OutputTuple = [user: string, loanId: bigint, liquidator: string];
  export interface OutputObject {
    user: string;
    loanId: bigint;
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [
    user: AddressLike,
    loanId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, loanId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    loanId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolFundedEvent {
  export type InputTuple = [
    funder: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [funder: string, token: string, amount: bigint];
  export interface OutputObject {
    funder: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BorrowProtocol extends BaseContract {
  connect(runner?: ContractRunner | null): BorrowProtocol;
  waitForDeployment(): Promise<this>;

  interface: BorrowProtocolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Borrow: TypedContractMethod<
    [
      _collateralToken: AddressLike,
      _collateralAmount: BigNumberish,
      _borrowToken: AddressLike,
      _borrowAmount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allActiveLoans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        loanId: bigint;
        collateralAmount: bigint;
        collateralToken: string;
        borrowToken: string;
        borrowAmount: bigint;
        duration: bigint;
        startTime: bigint;
        interestRate: bigint;
        userAddress: string;
        amountPaid: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  calculateHealthFactorSimulated: TypedContractMethod<
    [
      _collateralAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      _yieldTokenAddress: AddressLike
    ],
    [bigint],
    "view"
  >;

  calculateTotalDue: TypedContractMethod<
    [user: AddressLike, loanId: BigNumberish],
    [bigint],
    "view"
  >;

  currentLoanId: TypedContractMethod<[], [bigint], "view">;

  fundPool: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllActiveLoans: TypedContractMethod<
    [],
    [BorrowProtocol.LoanStructOutput[]],
    "view"
  >;

  getLiquidationThreshold: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getMinCollateralAmount: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getMinHealthFactor: TypedContractMethod<[], [bigint], "view">;

  getMinimumDuration: TypedContractMethod<[], [bigint], "view">;

  getUserLoans: TypedContractMethod<
    [user: AddressLike],
    [BorrowProtocol.LoanStructOutput[]],
    "view"
  >;

  liquidate: TypedContractMethod<
    [user: AddressLike, loanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  minHealthFactor: TypedContractMethod<[], [bigint], "view">;

  minimumDuration: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payLoan: TypedContractMethod<[_loanId: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setLiquidationThreshold: TypedContractMethod<
    [token: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinCollateralAmount: TypedContractMethod<
    [_yieldToken: AddressLike, _minimumCollateralAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinHealthFactor: TypedContractMethod<
    [_minHealthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinimumDuration: TypedContractMethod<
    [_minimumDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  yieldPool: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Borrow"
  ): TypedContractMethod<
    [
      _collateralToken: AddressLike,
      _collateralAmount: BigNumberish,
      _borrowToken: AddressLike,
      _borrowAmount: BigNumberish,
      _duration: BigNumberish,
      _interestRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allActiveLoans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        boolean
      ] & {
        loanId: bigint;
        collateralAmount: bigint;
        collateralToken: string;
        borrowToken: string;
        borrowAmount: bigint;
        duration: bigint;
        startTime: bigint;
        interestRate: bigint;
        userAddress: string;
        amountPaid: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateHealthFactorSimulated"
  ): TypedContractMethod<
    [
      _collateralAmount: BigNumberish,
      _borrowAmount: BigNumberish,
      _yieldTokenAddress: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTotalDue"
  ): TypedContractMethod<
    [user: AddressLike, loanId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "currentLoanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundPool"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllActiveLoans"
  ): TypedContractMethod<[], [BorrowProtocol.LoanStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLiquidationThreshold"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinCollateralAmount"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinHealthFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserLoans"
  ): TypedContractMethod<
    [user: AddressLike],
    [BorrowProtocol.LoanStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [user: AddressLike, loanId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minHealthFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payLoan"
  ): TypedContractMethod<[_loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidationThreshold"
  ): TypedContractMethod<
    [token: AddressLike, threshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinCollateralAmount"
  ): TypedContractMethod<
    [_yieldToken: AddressLike, _minimumCollateralAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinHealthFactor"
  ): TypedContractMethod<
    [_minHealthFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumDuration"
  ): TypedContractMethod<
    [_minimumDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldPool"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ActiveLoanUpdated"
  ): TypedContractEvent<
    ActiveLoanUpdatedEvent.InputTuple,
    ActiveLoanUpdatedEvent.OutputTuple,
    ActiveLoanUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralDeposited"
  ): TypedContractEvent<
    CollateralDepositedEvent.InputTuple,
    CollateralDepositedEvent.OutputTuple,
    CollateralDepositedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "LoanCreated"
  ): TypedContractEvent<
    LoanCreatedEvent.InputTuple,
    LoanCreatedEvent.OutputTuple,
    LoanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolFunded"
  ): TypedContractEvent<
    PoolFundedEvent.InputTuple,
    PoolFundedEvent.OutputTuple,
    PoolFundedEvent.OutputObject
  >;

  filters: {
    "ActiveLoanUpdated(uint256,bool)": TypedContractEvent<
      ActiveLoanUpdatedEvent.InputTuple,
      ActiveLoanUpdatedEvent.OutputTuple,
      ActiveLoanUpdatedEvent.OutputObject
    >;
    ActiveLoanUpdated: TypedContractEvent<
      ActiveLoanUpdatedEvent.InputTuple,
      ActiveLoanUpdatedEvent.OutputTuple,
      ActiveLoanUpdatedEvent.OutputObject
    >;

    "CollateralDeposited(address,address,uint256)": TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;
    CollateralDeposited: TypedContractEvent<
      CollateralDepositedEvent.InputTuple,
      CollateralDepositedEvent.OutputTuple,
      CollateralDepositedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,uint256,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "LoanCreated(address,uint256,uint256,address,uint256)": TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;
    LoanCreated: TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;

    "LoanLiquidated(address,uint256,address)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRepaid(address,uint256,uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolFunded(address,address,uint256)": TypedContractEvent<
      PoolFundedEvent.InputTuple,
      PoolFundedEvent.OutputTuple,
      PoolFundedEvent.OutputObject
    >;
    PoolFunded: TypedContractEvent<
      PoolFundedEvent.InputTuple,
      PoolFundedEvent.OutputTuple,
      PoolFundedEvent.OutputObject
    >;
  };
}
