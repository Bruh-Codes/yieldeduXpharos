/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace YieldPool {
  export type PositionStruct = {
    positionAddress: AddressLike;
    token: AddressLike;
    id: BigNumberish;
    amount: BigNumberish;
    startTime: BigNumberish;
    lockDuration: BigNumberish;
    withdrawn: boolean;
  };

  export type PositionStructOutput = [
    positionAddress: string,
    token: string,
    id: bigint,
    amount: bigint,
    startTime: bigint,
    lockDuration: bigint,
    withdrawn: boolean
  ] & {
    positionAddress: string;
    token: string;
    id: bigint;
    amount: bigint;
    startTime: bigint;
    lockDuration: bigint;
    withdrawn: boolean;
  };
}

export interface YieldPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAllowedTokens"
      | "calculateExpectedYield"
      | "deposit"
      | "getActivePositions"
      | "getAllowedTokens"
      | "getMaxStakeDuration"
      | "getMinStakeDuration"
      | "getPosition"
      | "getTotalStakers"
      | "getTotalValueLocked"
      | "getUserTokenBalances"
      | "getYieldRate"
      | "getYieldToken"
      | "isTokenAllowed"
      | "modifyAllowedTokens"
      | "removeAllowedToken"
      | "unstake"
      | "updateYieldParameters"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposited"
      | "TokenAllowedStatusChanged"
      | "Withdrawn"
      | "YieldParametersUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAllowedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExpectedYield",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivePositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxStakeDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinStakeDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenBalances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyAllowedTokens",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateYieldParameters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExpectedYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActivePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxStakeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinStakeDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyAllowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateYieldParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAllowedStatusChangedEvent {
  export type InputTuple = [token: AddressLike, allowed: boolean];
  export type OutputTuple = [token: string, allowed: boolean];
  export interface OutputObject {
    token: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    yield_: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    yield_: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    yield: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldParametersUpdatedEvent {
  export type InputTuple = [
    yieldRate: BigNumberish,
    minDuration: BigNumberish,
    maxDuration: BigNumberish
  ];
  export type OutputTuple = [
    yieldRate: bigint,
    minDuration: bigint,
    maxDuration: bigint
  ];
  export interface OutputObject {
    yieldRate: bigint;
    minDuration: bigint;
    maxDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface YieldPool extends BaseContract {
  connect(runner?: ContractRunner | null): YieldPool;
  waitForDeployment(): Promise<this>;

  interface: YieldPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAllowedTokens: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateExpectedYield: TypedContractMethod<
    [_amount: BigNumberish, _lockDuration: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActivePositions: TypedContractMethod<
    [],
    [YieldPool.PositionStructOutput[]],
    "view"
  >;

  getAllowedTokens: TypedContractMethod<[], [string[]], "view">;

  getMaxStakeDuration: TypedContractMethod<[], [bigint], "view">;

  getMinStakeDuration: TypedContractMethod<[], [bigint], "view">;

  getPosition: TypedContractMethod<
    [positionId: BigNumberish],
    [YieldPool.PositionStructOutput],
    "view"
  >;

  getTotalStakers: TypedContractMethod<[], [bigint], "view">;

  getTotalValueLocked: TypedContractMethod<[], [bigint], "view">;

  getUserTokenBalances: TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; balances: bigint[] }],
    "view"
  >;

  getYieldRate: TypedContractMethod<[], [bigint], "view">;

  getYieldToken: TypedContractMethod<[], [string], "view">;

  isTokenAllowed: TypedContractMethod<[_token: AddressLike], [boolean], "view">;

  modifyAllowedTokens: TypedContractMethod<
    [_newToken: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  removeAllowedToken: TypedContractMethod<
    [_tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateYieldParameters: TypedContractMethod<
    [
      _yieldRate: BigNumberish,
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAllowedTokens"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateExpectedYield"
  ): TypedContractMethod<
    [_amount: BigNumberish, _lockDuration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActivePositions"
  ): TypedContractMethod<[], [YieldPool.PositionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getAllowedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMaxStakeDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinStakeDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [YieldPool.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStakers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalValueLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTokenBalances"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { tokens: string[]; balances: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getYieldRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getYieldToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isTokenAllowed"
  ): TypedContractMethod<[_token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "modifyAllowedTokens"
  ): TypedContractMethod<
    [_newToken: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAllowedToken"
  ): TypedContractMethod<[_tokenAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateYieldParameters"
  ): TypedContractMethod<
    [
      _yieldRate: BigNumberish,
      _minDuration: BigNumberish,
      _maxDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAllowedStatusChanged"
  ): TypedContractEvent<
    TokenAllowedStatusChangedEvent.InputTuple,
    TokenAllowedStatusChangedEvent.OutputTuple,
    TokenAllowedStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "YieldParametersUpdated"
  ): TypedContractEvent<
    YieldParametersUpdatedEvent.InputTuple,
    YieldParametersUpdatedEvent.OutputTuple,
    YieldParametersUpdatedEvent.OutputObject
  >;

  filters: {
    "Deposited(address,address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "TokenAllowedStatusChanged(address,bool)": TypedContractEvent<
      TokenAllowedStatusChangedEvent.InputTuple,
      TokenAllowedStatusChangedEvent.OutputTuple,
      TokenAllowedStatusChangedEvent.OutputObject
    >;
    TokenAllowedStatusChanged: TypedContractEvent<
      TokenAllowedStatusChangedEvent.InputTuple,
      TokenAllowedStatusChangedEvent.OutputTuple,
      TokenAllowedStatusChangedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "YieldParametersUpdated(uint256,uint256,uint256)": TypedContractEvent<
      YieldParametersUpdatedEvent.InputTuple,
      YieldParametersUpdatedEvent.OutputTuple,
      YieldParametersUpdatedEvent.OutputObject
    >;
    YieldParametersUpdated: TypedContractEvent<
      YieldParametersUpdatedEvent.InputTuple,
      YieldParametersUpdatedEvent.OutputTuple,
      YieldParametersUpdatedEvent.OutputObject
    >;
  };
}
